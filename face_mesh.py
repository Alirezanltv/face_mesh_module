# -*- coding: utf-8 -*-
"""face mesh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V9wV6AdrzgvtJcT-nJKOzWII-eazBDTB
"""
import cv2
import mediapipe as mp
from google.colab.patches import cv2_imshow
import numpy as np

# /////////////////////////////////////////
# facemesh Module
class FaceMeshDetector():
  def __init__(self , static_image_mode =False , max_num_faces =2 ,refine_landmarks=False,
              min_detection_confidence = 0.5 , min_tracking_confidence = 0.5):
    self.static_image_mode = static_image_mode
    self.max_num_faces = max_num_faces 
    self.refine_landmarks = refine_landmarks
    self.min_detection_confidence = min_detection_confidence
    self.min_tracking_confidence = min_tracking_confidence

    self.mpDraw = mp.solutions.drawing_utils
    self.mpFaceMesh = mp.solutions.face_mesh
    self.facemesh = self.mpFaceMesh.FaceMesh(self.static_image_mode , self.max_num_faces ,
                                             self.refine_landmarks,self.min_detection_confidence ,self.min_tracking_confidence )
    self.drawSpec =self.mpDraw.DrawingSpec(thickness = 1 ,circle_radius=1 , color=(0,255,0) )

  def findFaceMesh(self , img , draw=True):
    self.imgRGB = cv2.cvtColor(img , cv2.COLOR_BGR2RGB)
    self.results= self.facemesh.process(self.imgRGB)
    if self.results.multi_face_landmarks:
      for faceLms in self.results.multi_face_landmarks:
        self.mpDraw.draw_landmarks(img , faceLms , self.mpFaceMesh.FACEMESH_CONTOURS , self.drawSpec, self.drawSpec)
        face =[]
        for id , lm in enumerate(faceLms.landmark):
          ih , iw , ic = img.shape
          x,y = int(lm.x*iw) , int(lm.y*ih)
          
          cv2.putText(img , str(id) , (x,y) , cv2.FONT_HERSHEY_PLAIN , 0.5, (255,0,0) , 1)

          # print(id , x,y)
          face.append([x,y])
    return img,face

def main():
  img = cv2.imread("/content/bahram.jpg")
  detector = FaceMeshDetector()
  img,face = detector.findFaceMesh(img , False)
  
  cv2_imshow(img)

if __name__=="__main__":
  main()




